/* ========================================================================
 * Copyright 2014 miso4204
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 miso4204

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.qualifier

*/

package co.edu.uniandes.csw.miso4204.buyer.master.logic.ejb;

import co.edu.uniandes.csw.miso4204.creditcard.logic.dto.CreditCardDTO;
import co.edu.uniandes.csw.miso4204.creditcard.persistence.CreditCardPersistence;

import co.edu.uniandes.csw.miso4204.address.logic.dto.AddressDTO;
import co.edu.uniandes.csw.miso4204.address.persistence.AddressPersistence;

import co.edu.uniandes.csw.miso4204.buyer.logic.dto.BuyerDTO;
import co.edu.uniandes.csw.miso4204.buyer.master.logic.dto.BuyerMasterDTO;
import co.edu.uniandes.csw.miso4204.buyer.master.persistence.entity.BuyercreditCardEntity;
import co.edu.uniandes.csw.miso4204.buyer.master.persistence.entity.BuyeraddressEntity;
import co.edu.uniandes.csw.miso4204.buyer.persistence.BuyerPersistence;
import co.edu.uniandes.csw.miso4204.buyer.master.persistence.BuyerMasterPersistence;


public abstract class _BuyerMasterLogicService {

 
    protected BuyerPersistence buyerPersistance;

    protected BuyerMasterPersistence buyerMasterPersistance;
   
    protected CreditCardPersistence creditCardPersistance;
    protected AddressPersistence addressPersistance;

    public BuyerMasterDTO createMasterBuyer(BuyerMasterDTO buyer) {
        BuyerDTO persistedBuyerDTO = buyerPersistance.createBuyer(buyer.getBuyerEntity());
        if (buyer.getCreatecreditCard() != null) {
            for (CreditCardDTO creditCardDTO : buyer.getCreatecreditCard()) {
                CreditCardDTO createdCreditCardDTO = creditCardPersistance.createCreditCard(creditCardDTO);
                BuyercreditCardEntity buyerCreditCardEntity = new BuyercreditCardEntity(persistedBuyerDTO.getId(), createdCreditCardDTO.getId());
                buyerMasterPersistance.createBuyercreditCardEntity(buyerCreditCardEntity);
            }
        }
        if (buyer.getCreateaddress() != null) {
            for (AddressDTO addressDTO : buyer.getCreateaddress()) {
                AddressDTO createdAddressDTO = addressPersistance.createAddress(addressDTO);
                BuyeraddressEntity buyerAddressEntity = new BuyeraddressEntity(persistedBuyerDTO.getId(), createdAddressDTO.getId());
                buyerMasterPersistance.createBuyeraddressEntity(buyerAddressEntity);
            }
        }
        // update creditCard
        if (buyer.getUpdatecreditCard() != null) {
            for (CreditCardDTO creditCardDTO : buyer.getUpdatecreditCard()) {
                creditCardPersistance.updateCreditCard(creditCardDTO);
                BuyercreditCardEntity buyerCreditCardEntity = new BuyercreditCardEntity(persistedBuyerDTO.getId(), creditCardDTO.getId());
                buyerMasterPersistance.createBuyercreditCardEntity(buyerCreditCardEntity);
            }
        }
        // update address
        if (buyer.getUpdateaddress() != null) {
            for (AddressDTO addressDTO : buyer.getUpdateaddress()) {
                addressPersistance.updateAddress(addressDTO);
                BuyeraddressEntity buyerAddressEntity = new BuyeraddressEntity(persistedBuyerDTO.getId(), addressDTO.getId());
                buyerMasterPersistance.createBuyeraddressEntity(buyerAddressEntity);
            }
        }
        return buyer;
    }

    public BuyerMasterDTO getMasterBuyer(Long id) {
        return buyerMasterPersistance.getBuyer(id);
    }

    public void deleteMasterBuyer(Long id) {
        buyerPersistance.deleteBuyer(id);
    }

    public void updateMasterBuyer(BuyerMasterDTO buyer) {
        buyerPersistance.updateBuyer(buyer.getBuyerEntity());

        //---- FOR RELATIONSHIP
        // persist new creditCard
        if (buyer.getCreatecreditCard() != null) {
            for (CreditCardDTO creditCardDTO : buyer.getCreatecreditCard()) {
                CreditCardDTO createdCreditCardDTO = creditCardPersistance.createCreditCard(creditCardDTO);
                BuyercreditCardEntity buyerCreditCardEntity = new BuyercreditCardEntity(buyer.getBuyerEntity().getId(), createdCreditCardDTO.getId());
                buyerMasterPersistance.createBuyercreditCardEntity(buyerCreditCardEntity);
            }
        }
        // update creditCard
        if (buyer.getUpdatecreditCard() != null) {
            for (CreditCardDTO creditCardDTO : buyer.getUpdatecreditCard()) {
                creditCardPersistance.updateCreditCard(creditCardDTO);
            }
        }
        // delete creditCard
        if (buyer.getDeletecreditCard() != null) {
            for (CreditCardDTO creditCardDTO : buyer.getDeletecreditCard()) {
                buyerMasterPersistance.deleteBuyercreditCardEntity(buyer.getBuyerEntity().getId(), creditCardDTO.getId());
                creditCardPersistance.deleteCreditCard(creditCardDTO.getId());
            }
        }
        // persist new address
        if (buyer.getCreateaddress() != null) {
            for (AddressDTO addressDTO : buyer.getCreateaddress()) {
                AddressDTO createdAddressDTO = addressPersistance.createAddress(addressDTO);
                BuyeraddressEntity buyerAddressEntity = new BuyeraddressEntity(buyer.getBuyerEntity().getId(), createdAddressDTO.getId());
                buyerMasterPersistance.createBuyeraddressEntity(buyerAddressEntity);
            }
        }
        // update address
        if (buyer.getUpdateaddress() != null) {
            for (AddressDTO addressDTO : buyer.getUpdateaddress()) {
                addressPersistance.updateAddress(addressDTO);
            }
        }
        // delete address
        if (buyer.getDeleteaddress() != null) {
            for (AddressDTO addressDTO : buyer.getDeleteaddress()) {
                buyerMasterPersistance.deleteBuyeraddressEntity(buyer.getBuyerEntity().getId(), addressDTO.getId());
                addressPersistance.deleteAddress(addressDTO.getId());
            }
        }
    }
}
