/* ========================================================================
 * Copyright 2014 miso4204
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 miso4204

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.qualifier

*/

package co.edu.uniandes.csw.miso4204.buyer.persistence;

import co.edu.uniandes.csw.miso4204.buyer.logic.dto.BuyerDTO;
import co.edu.uniandes.csw.miso4204.buyer.logic.dto.BuyerPageDTO;

import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import org.apache.shiro.SecurityUtils;

public class BuyerPersistence extends _BuyerPersistence{

    private EntityManagerFactory emf;
    
    public BuyerPersistence() {
		emf = Persistence.createEntityManagerFactory("BuyerPU");		
    }
    
    public void getEntityManager() {
        co.edu.uniandes.csw.miso4204.security.logic.dto.UserDTO buyerS = (co.edu.uniandes.csw.miso4204.security.logic.dto.UserDTO) SecurityUtils.getSubject().getPrincipal();
        String tenant = buyerS.getTenantID();
        Map<String, Object> emProperties = new HashMap<String, Object>();
        emProperties.put("eclipselink.tenant-id", tenant);//Asigna un valor al multitenant
        entityManager = emf.createEntityManager(emProperties);
    }
    
    @Override
    public BuyerDTO createBuyer(BuyerDTO buyer) {
        BuyerDTO buyer2;
        try {
            getEntityManager();
            buyer2 = super.createBuyer(buyer);
        } catch (Exception e) {
            e.printStackTrace();
            buyer2 = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return buyer2;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public List<BuyerDTO> getBuyers() {
        List<BuyerDTO> list;
        try {
            getEntityManager();
            list = super.getBuyers();
        } catch (Exception e) {
            e.printStackTrace();
            list = new ArrayList<BuyerDTO>();
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return list;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public BuyerPageDTO getBuyers(Integer page, Integer maxRecords) {
        BuyerPageDTO pages;
        try {
            getEntityManager();
            pages = super.getBuyers(page, maxRecords);
        } catch (Exception e) {
            e.printStackTrace();
            pages = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return pages;
    }
    
    @Override
    public BuyerDTO getBuyer(Long id) {
        BuyerDTO buyer;
        try {
            getEntityManager();
            buyer = super.getBuyer(id);
        } catch (Exception e) {
            e.printStackTrace();
            buyer = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return buyer;
    }
    
    @Override
    public void deleteBuyer(Long id) {
        try {
            getEntityManager();
            super.deleteBuyer(id);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
    }
    
    @Override
    public void updateBuyer(BuyerDTO detail) {
        try {
            getEntityManager();
            super.updateBuyer(detail);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
    }

}