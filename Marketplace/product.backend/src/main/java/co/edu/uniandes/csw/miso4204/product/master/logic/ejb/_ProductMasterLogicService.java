/* ========================================================================
 * Copyright 2014 miso4204
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 miso4204

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.qualifier

*/

package co.edu.uniandes.csw.miso4204.product.master.logic.ejb;

import co.edu.uniandes.csw.miso4204.picture.logic.dto.PictureDTO;
import co.edu.uniandes.csw.miso4204.picture.persistence.PicturePersistence;

import co.edu.uniandes.csw.miso4204.feature.logic.dto.FeatureDTO;
import co.edu.uniandes.csw.miso4204.feature.persistence.FeaturePersistence;

import co.edu.uniandes.csw.miso4204.product.logic.dto.ProductDTO;
import co.edu.uniandes.csw.miso4204.product.master.logic.dto.ProductMasterDTO;
import co.edu.uniandes.csw.miso4204.product.master.persistence.entity.ProductpictureEntity;
import co.edu.uniandes.csw.miso4204.product.master.persistence.entity.ProductfeatureEntity;
import co.edu.uniandes.csw.miso4204.product.persistence.ProductPersistence;
import co.edu.uniandes.csw.miso4204.product.master.persistence.ProductMasterPersistence;


public abstract class _ProductMasterLogicService {

 
    protected ProductPersistence productPersistance;

    protected ProductMasterPersistence productMasterPersistance;
   
    protected PicturePersistence picturePersistance;
    protected FeaturePersistence featurePersistance;

    public ProductMasterDTO createMasterProduct(ProductMasterDTO product) {
        ProductDTO persistedProductDTO = productPersistance.createProduct(product.getProductEntity());
        if (product.getCreatepicture() != null) {
            for (PictureDTO pictureDTO : product.getCreatepicture()) {
                PictureDTO createdPictureDTO = picturePersistance.createPicture(pictureDTO);
                ProductpictureEntity productPictureEntity = new ProductpictureEntity(persistedProductDTO.getId(), createdPictureDTO.getId());
                productMasterPersistance.createProductpictureEntity(productPictureEntity);
            }
        }
        if (product.getCreatefeature() != null) {
            for (FeatureDTO featureDTO : product.getCreatefeature()) {
                FeatureDTO createdFeatureDTO = featurePersistance.createFeature(featureDTO);
                ProductfeatureEntity productFeatureEntity = new ProductfeatureEntity(persistedProductDTO.getId(), createdFeatureDTO.getId());
                productMasterPersistance.createProductfeatureEntity(productFeatureEntity);
            }
        }
        // update picture
        if (product.getUpdatepicture() != null) {
            for (PictureDTO pictureDTO : product.getUpdatepicture()) {
                picturePersistance.updatePicture(pictureDTO);
                ProductpictureEntity productPictureEntity = new ProductpictureEntity(persistedProductDTO.getId(), pictureDTO.getId());
                productMasterPersistance.createProductpictureEntity(productPictureEntity);
            }
        }
        // update feature
        if (product.getUpdatefeature() != null) {
            for (FeatureDTO featureDTO : product.getUpdatefeature()) {
                featurePersistance.updateFeature(featureDTO);
                ProductfeatureEntity productFeatureEntity = new ProductfeatureEntity(persistedProductDTO.getId(), featureDTO.getId());
                productMasterPersistance.createProductfeatureEntity(productFeatureEntity);
            }
        }
        return product;
    }

    public ProductMasterDTO getMasterProduct(Long id) {
        return productMasterPersistance.getProduct(id);
    }

    public void deleteMasterProduct(Long id) {
        productPersistance.deleteProduct(id);
    }

    public void updateMasterProduct(ProductMasterDTO product) {
        productPersistance.updateProduct(product.getProductEntity());

        //---- FOR RELATIONSHIP
        // persist new picture
        if (product.getCreatepicture() != null) {
            for (PictureDTO pictureDTO : product.getCreatepicture()) {
                PictureDTO createdPictureDTO = picturePersistance.createPicture(pictureDTO);
                ProductpictureEntity productPictureEntity = new ProductpictureEntity(product.getProductEntity().getId(), createdPictureDTO.getId());
                productMasterPersistance.createProductpictureEntity(productPictureEntity);
            }
        }
        // update picture
        if (product.getUpdatepicture() != null) {
            for (PictureDTO pictureDTO : product.getUpdatepicture()) {
                picturePersistance.updatePicture(pictureDTO);
            }
        }
        // delete picture
        if (product.getDeletepicture() != null) {
            for (PictureDTO pictureDTO : product.getDeletepicture()) {
                productMasterPersistance.deleteProductpictureEntity(product.getProductEntity().getId(), pictureDTO.getId());
                picturePersistance.deletePicture(pictureDTO.getId());
            }
        }
        // persist new feature
        if (product.getCreatefeature() != null) {
            for (FeatureDTO featureDTO : product.getCreatefeature()) {
                FeatureDTO createdFeatureDTO = featurePersistance.createFeature(featureDTO);
                ProductfeatureEntity productFeatureEntity = new ProductfeatureEntity(product.getProductEntity().getId(), createdFeatureDTO.getId());
                productMasterPersistance.createProductfeatureEntity(productFeatureEntity);
            }
        }
        // update feature
        if (product.getUpdatefeature() != null) {
            for (FeatureDTO featureDTO : product.getUpdatefeature()) {
                featurePersistance.updateFeature(featureDTO);
            }
        }
        // delete feature
        if (product.getDeletefeature() != null) {
            for (FeatureDTO featureDTO : product.getDeletefeature()) {
                productMasterPersistance.deleteProductfeatureEntity(product.getProductEntity().getId(), featureDTO.getId());
                featurePersistance.deleteFeature(featureDTO.getId());
            }
        }
    }
}
