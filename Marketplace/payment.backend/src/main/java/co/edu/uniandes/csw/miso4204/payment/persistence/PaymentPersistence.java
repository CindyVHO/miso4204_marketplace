/* ========================================================================
 * Copyright 2014 miso4204
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 miso4204

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 * ========================================================================


 Source generated by CrudMaker version 1.0.0.qualifier

 */
package co.edu.uniandes.csw.miso4204.payment.persistence;

import co.edu.uniandes.csw.miso4204.payment.logic.dto.PaymentDTO;
import co.edu.uniandes.csw.miso4204.payment.logic.dto.PaymentPageDTO;
import co.edu.uniandes.csw.miso4204.security.logic.dto.UserDTO;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import org.apache.shiro.SecurityUtils;

public class PaymentPersistence extends _PaymentPersistence {

    private final EntityManagerFactory emf;

    public PaymentPersistence() {
        emf = Persistence.createEntityManagerFactory("PaymentPU");
    }

    public void getEntityManager() {
        UserDTO sesion = (UserDTO) SecurityUtils.getSubject().getPrincipal();
        String tenant = sesion.getTenantID();
        Map<String, Object> emProperties = new HashMap<String, Object>();
        emProperties.put("eclipselink.tenant-id", tenant);//Asigna un valor al multitenant
        entityManager = emf.createEntityManager(emProperties);
    }

    @Override
    public PaymentDTO createPayment(PaymentDTO payment) {
        PaymentDTO result;
        try {
            getEntityManager();
            result = super.createPayment(payment);
        } catch (Exception e) {
            e.printStackTrace();
            result = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    public List<PaymentDTO> getPayment() {
        List<PaymentDTO> result;
        try {
            getEntityManager();
            result = super.getPayments();
        } catch (Exception e) {
            e.printStackTrace();
            result = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    public PaymentPageDTO getPayment(Integer page, Integer maxRecords) {
        PaymentPageDTO result;
        try {
            getEntityManager();
            result = super.getPayments(page, maxRecords);
        } catch (Exception e) {
            e.printStackTrace();
            result = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return result;
    }

    @Override
    public PaymentDTO getPayment(Long id) {
        PaymentDTO result;
        try {
            getEntityManager();
            result = super.getPayment(id);
        } catch (Exception e) {
            e.printStackTrace();
            result = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return result;
    }

    @Override
    public void deletePayment(Long id) {
        try {
            getEntityManager();
            super.deletePayment(id);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
    }

    @Override
    public void updatePayment(PaymentDTO detail) {
        try {
            getEntityManager();
            super.updatePayment(detail);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
    }
}
