/* ========================================================================
 * Copyright 2014 miso4204
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 miso4204

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 * ========================================================================


 Source generated by CrudMaker version 1.0.0.qualifier

 */
package co.edu.uniandes.csw.miso4204.purchase.persistence;

import co.edu.uniandes.csw.miso4204.purchase.logic.dto.PurchaseDTO;
import co.edu.uniandes.csw.miso4204.purchase.logic.dto.PurchasePageDTO;
import co.edu.uniandes.csw.miso4204.purchase.persistence.converter.PurchaseConverter;
import co.edu.uniandes.csw.miso4204.purchase.persistence.entity.PurchaseEntity;
import co.edu.uniandes.csw.miso4204.security.logic.dto.UserDTO;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import org.apache.shiro.SecurityUtils;

public class PurchasePersistence extends _PurchasePersistence {

    private final EntityManagerFactory emf;

    public PurchasePersistence() {
        emf = Persistence.createEntityManagerFactory("PurchasePU");
    }

    public void getEntityManager() {
        UserDTO sesion = (UserDTO) SecurityUtils.getSubject().getPrincipal();
        String tenant = sesion.getTenantID();
        Map<String, Object> emProperties = new HashMap<String, Object>();
        emProperties.put("eclipselink.tenant-id", tenant);//Asigna un valor al multitenant
        entityManager = emf.createEntityManager(emProperties);
    }

    @Override
    public PurchaseDTO createPurchase(PurchaseDTO purchase) {
        PurchaseDTO result;
        try {
            getEntityManager();
            result = super.createPurchase(purchase);
        } catch (Exception e) {
            e.printStackTrace();
            result = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return result;
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<PurchaseDTO> getPurchases() {
        List<PurchaseDTO> result;
        try {
            getEntityManager();
            result = super.getPurchases();
        } catch (Exception e) {
            e.printStackTrace();
            result = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return result;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PurchasePageDTO getPurchases(Integer page, Integer maxRecords) {
        PurchasePageDTO result;
        try {
            getEntityManager();
            result = super.getPurchases(page, maxRecords);
        } catch (Exception e) {
            e.printStackTrace();
            result = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return result;
    }

    @Override
    public PurchaseDTO getPurchase(Long id) {
        PurchaseDTO result;
        try {
            getEntityManager();
            result = super.getPurchase(id);
        } catch (Exception e) {
            e.printStackTrace();
            result = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return result;
    }

    @Override
    public void deletePurchase(Long id) {
        try {
            getEntityManager();
            super.deletePurchase(id);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
    }

    @Override
    public void updatePurchase(PurchaseDTO detail) {
        try {
            getEntityManager();
            super.updatePurchase(detail);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
    }

    @SuppressWarnings("unchecked")
    public PurchasePageDTO getPurchasesBuyer(Integer page, Integer maxRecords, Long id) {
        PurchasePageDTO response;
        try {
            getEntityManager();
            entityManager.getTransaction().begin();
            Query count = entityManager.createQuery("select count(u) from PurchaseEntity u");
            Long regCount = 0L;
            regCount = Long.parseLong(count.getSingleResult().toString());
            Query q = entityManager.createQuery("select u from PurchaseEntity u where u.buyerId =" + id + "");
            if (page != null && maxRecords != null) {
                q.setFirstResult((page - 1) * maxRecords);
                q.setMaxResults(maxRecords);
            }
            response = new PurchasePageDTO();
            response.setTotalRecords(regCount);
            response.setRecords(PurchaseConverter.entity2PersistenceDTOList(q.getResultList()));
            entityManager.getTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
            response = null;
        } finally {
            if (entityManager.isOpen()) {
                entityManager.close();
            }
        }
        return response;
    }

    @SuppressWarnings("unchecked")
    public PurchasePageDTO getPurchasesSearch(Integer page, Integer maxRecords, String ini_date, String end_date, Long id_purchase) {
        PurchasePageDTO response;
        try {
            getEntityManager();
            entityManager.getTransaction().begin();
            Query count = entityManager.createQuery("select count(u) from PurchaseEntity u");
            Long regCount = 0L;
            regCount = Long.parseLong(count.getSingleResult().toString());

            String qr = "select u from PurchaseEntity u where u.buyerId > 0 ";

            if (!ini_date.equals("") && !end_date.equals("")) {
                qr += " and u.purchaseDate >='" + ini_date + "' and u.purchaseDate <= '" + end_date + "'";
            }

            if (id_purchase > 0) {
                qr += " and u.Id = " + id_purchase + "";
            }

            Query q = entityManager.createQuery(qr);

            if (page != null && maxRecords != null) {
                q.setFirstResult((page - 1) * maxRecords);
                q.setMaxResults(maxRecords);
            }
            response = new PurchasePageDTO();
            response.setTotalRecords(regCount);
            response.setRecords(PurchaseConverter.entity2PersistenceDTOList(q.getResultList()));
            entityManager.getTransaction().commit();
        }catch(Exception e){
            e.printStackTrace();
            response = null;
        }
        
        finally{
            if(entityManager.isOpen()){
                entityManager.close();
            }
        }
        return response;
    }
    
    public PurchaseDTO getLastPurchaseByBuyer(Long idBuyer) {

        Query query = entityManager.createQuery("select u from PurchaseEntity u where u.id = (select max(r.id) from PurchaseEntity r where r.buyerId = :idBuyer) ");
        query.setParameter("idBuyer", idBuyer);

        PurchaseDTO result = PurchaseConverter.entity2PersistenceDTO((PurchaseEntity)query.getSingleResult());
        return result;
    }
}
